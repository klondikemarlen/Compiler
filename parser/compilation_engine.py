class CompilationEngine:
    """A recursive top-down parser for Jack.

    The *CompilationEngine* effects the actual compilation output.

    It gets its input from a `JackTokenizer` and emits its parsed structure into an output file/stream.

    The output is generated by a series of `compilexxx()` routines, one for every syntactic element `xxx` of the Jack grammar.

    The contract between these routines is that each `compilexxx()` routine should read the syntactic construct `xxx` from the input, `advance()` the tokenizer exactly beyond `xxx`, and output the parsing of `xxx`.
        Thus, `compilexxx()` may only be called if `xxx` is the next syntactic element of the input.

    In the first version of the compiler, which we now build, this module emits a structured printout of the code, wrapped in XML tags (defined in the specs of project 10). In the final version of the compiler, this module generates executable VM code (defined in the specs of project 11).

    In both cases, the parsing logic and module API are exactly the same.
    """

    def __init__(self, infile, outfile):
        """Creates a new compilation engine with the given input and output.

        The next routine called must be `compile_class()`.
        """

    def compile_class(self):
        """Compiles a complete class."""

    def compile_class_var_dec(self):
        """Compiles a static declaration or a field declaration."""

    # and many more ...
